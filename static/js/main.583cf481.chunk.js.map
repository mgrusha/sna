{"version":3,"sources":["components/content/post/PostHeader.js","components/content/post/PostText.js","components/content/post/PostComments.js","components/content/post/Post.js","components/content/Wall.js","components/header/Header.js","App.js","serviceWorker.js","index.js"],"names":["PostHeaderContainer","styled","div","UserName","h4","CommentDate","p","PostHeader","userName","date","Date","toLocaleDateString","PostText","text","PostCommentsHolder","CommentHolder","CommentAuthor","span","PostComments","comments","map","comment","index","key","author","PostContainer","AddPostComment","TextField","Post","useState","innerComments","setInnerComments","inputValue","setInputValue","placeholder","multiline","variant","onKeyDown","event","trim","onChange","target","value","WallContainer","main","Wall","posts","sort","a","b","timeStamp","post","postId","HeaderText","h6","StyledToolbar","Toolbar","Header","AppBar","position","IconButton","edge","color","aria-label","Button","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.583cf481.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst PostHeaderContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst UserName = styled.h4`\n  font-weight: 700;\n  margin: 0;\n`;\n\nconst CommentDate = styled.p`\n  font-weight: 300;\n  font-style: italic;\n`;\n\nexport const PostHeader = ({ userName, date }) => {\n  return (\n    <PostHeaderContainer>\n      <UserName>{userName}</UserName>\n      <CommentDate>\n        {new Date(date * 1000).toLocaleDateString(\"pl-PL\")}\n      </CommentDate>\n    </PostHeaderContainer>\n  );\n};\n","import React from \"react\";\n\nexport const PostText = ({ text }) => {\n  return <div>{text}</div>;\n};\n","import styled from \"styled-components\";\nimport React from \"react\";\n\nconst PostCommentsHolder = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-size: 0.9rem;\n`;\n\nconst CommentHolder = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CommentAuthor = styled.span`\n  font-weight: 700;\n`;\n\nexport const PostComments = ({ comments }) => {\n  return (\n    <PostCommentsHolder>\n      {comments.map((comment, index) => (\n        <CommentHolder key={index}>\n          <CommentAuthor>{comment.author}</CommentAuthor>\n          {comment.text}\n        </CommentHolder>\n      ))}\n    </PostCommentsHolder>\n  );\n};\n","import styled from \"styled-components\";\nimport React, { useState } from \"react\";\nimport { PostHeader } from \"./PostHeader\";\nimport { PostText } from \"./PostText\";\nimport { PostComments } from \"./PostComments\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst PostContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 2rem 0;\n  padding: 1rem;\n  border: 1px solid grey;\n  border-radius: 10px;\n`;\n\nconst AddPostComment = styled(TextField)`\n  margin: 0.7rem 0;\n  && {\n    font-size: 1rem;\n  }\n`;\n\nexport const Post = ({ userName, date, text, comments }) => {\n  const [innerComments, setInnerComments] = useState(comments);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\" && inputValue.trim() !== \"\") {\n      setInnerComments([\n        ...innerComments,\n        {\n          author: \"Anonymus\",\n          text: inputValue,\n        },\n      ]);\n      setInputValue(\"\");\n    }\n  };\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  return (\n    <PostContainer>\n      <PostHeader userName={userName} date={date} />\n      <PostText text={text} />\n      <PostComments comments={innerComments} />\n      <AddPostComment\n        placeholder=\"Add comment\"\n        multiline\n        variant=\"outlined\"\n        onKeyDown={handleKeyDown}\n        onChange={handleChange}\n        value={inputValue}\n      />\n    </PostContainer>\n  );\n};\n","import styled from \"styled-components\";\nimport React from \"react\";\nimport posts from \"../../mockedData/posts.json\";\nimport { Post } from \"./post/Post\";\n\nconst WallContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  width: 40%;\n  margin: 0 auto;\n`;\n\nexport const Wall = () => {\n  return (\n    <WallContainer>\n      {posts\n        .sort((a, b) => b.timeStamp - a.timeStamp)\n        .map((post) => (\n          <Post\n            key={post.postId}\n            userName={post.userName}\n            date={post.timeStamp}\n            text={post.text}\n            comments={post.comments}\n          />\n        ))}\n    </WallContainer>\n  );\n};\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport styled from \"styled-components\";\n\nconst HeaderText = styled.h6`\n  font-size: 1.5rem;\n  margin: 0;\n`;\n\nconst StyledToolbar = styled(Toolbar)`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport default function Header() {\n  return (\n    <AppBar position=\"static\">\n      <StyledToolbar>\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n          <MenuIcon />\n        </IconButton>\n        <HeaderText>Posts</HeaderText>\n        <Button color=\"inherit\">Login</Button>\n      </StyledToolbar>\n    </AppBar>\n  );\n}\n","import React from \"react\";\nimport { Wall } from \"./components/content/Wall\";\nimport Header from \"./components/header/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Wall />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}